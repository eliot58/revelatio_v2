<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Revelatio</title>
    <style>
        html,
        body {
            height: 100%;
        }

        * {
            box-sizing: border-box;
        }

        body {
            margin: 0;
            min-height: 100vh;
            background: #000;
            color: #fff;
            display: flex;
            align-items: center;
            justify-content: center;
            font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, "Apple Color Emoji", "Segoe UI Emoji";
        }

        .wrap {
            display: grid;
            gap: 16px;
            justify-items: center;
        }

        #connect {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .actions {
            display: grid;
            gap: 12px;
            grid-auto-rows: min-content;
            width: min(92vw, 520px);
        }

        button {
            padding: 10px 16px;
            border: none;
            border-radius: 12px;
            background: #1a1a1a;
            color: #fff;
            cursor: pointer;
            font-weight: 600;
        }

        button:disabled {
            opacity: .5;
            cursor: not-allowed;
        }

        .hint {
            opacity: .7;
            font-size: 14px;
            text-align: center;
        }

        .row {
            display: grid;
            gap: 8px;
            grid-auto-flow: column;
            grid-auto-columns: 1fr;
        }

        /* profile */
        .profile {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .avatar {
            width: 56px;
            height: 56px;
            border-radius: 50%;
            overflow: hidden;
            background: #111;
            display: grid;
            place-items: center;
            font-weight: 700;
        }

        .avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .pname {
            font-size: 16px;
            font-weight: 700;
        }

        .puser {
            font-size: 14px;
            opacity: .7;
        }

        /* link box */
        .linkbox {
            display: grid;
            gap: 8px;
            padding: 12px;
            border: 1px solid #222;
            border-radius: 12px;
            background: #0b0b0b;
        }

        .linkbox .url {
            width: 100%;
            padding: 10px 12px;
            border-radius: 10px;
            border: 1px solid #2a2a2a;
            background: #121212;
            color: #fff;
            font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", monospace;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .copy-row {
            display: grid;
            grid-auto-flow: column;
            gap: 8px;
        }

        .copy-ok {
            font-size: 12px;
            opacity: .7;
            text-align: center;
        }
    </style>
</head>

<body>
    <div class="wrap">
        <!-- Профиль -->
        <div id="profile" class="profile" style="display:none">
            <div id="profile-avatar" class="avatar"></div>
            <div>
                <div id="profile-name" class="pname"></div>
                <div id="profile-username" class="puser"></div>
            </div>
        </div>

        <div class="actions" id="section-auth" style="display:none">
            <div id="auth-hint" class="hint"></div>
            <div class="row">
                <button id="btn-connect" style="display:none">Connect wallet</button>
                <button id="btn-disconnect" style="display:none">Disconnect</button>
            </div>
        </div>

        <div class="actions" id="section-links" style="display:none">
            <div class="hint">Request a one-time invite link:</div>
            <button id="btn-dao" disabled>Grouche DAO</button>
            <button id="btn-whales" disabled>Grouche Whales</button>
            <button id="btn-notwise" disabled>NOTWise holders</button>

            <!-- вывод ссылки для копирования -->
            <div id="link-box" class="linkbox" style="display:none">
                <input id="link-output" class="url" type="text" readonly value="">
                <div class="copy-row">
                    <button id="btn-copy">Copy</button>
                    <button id="btn-clear">Clear</button>
                </div>
                <div id="copy-ok" class="copy-ok" style="display:none">Copied ✔</div>
            </div>
        </div>
    </div>

    <script src="https://unpkg.com/@tonconnect/ui@latest/dist/tonconnect-ui.min.js"></script>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <script src="/public/tonweb.js"></script>
    <script>
        const tg = window.Telegram.WebApp;
        const $ = (s) => document.querySelector(s);

        // ---------- API ----------
        const API_HOST = 'https://revapi.masonsplay.com';

        async function apiGetUser() {
            const res = await fetch(`${API_HOST}/auth/user`, {
                headers: { Authorization: `initData ${tg.initData}` }
            });
            return res.json();
        }

        async function apiConnect(proof, account) {
            const body = {
                address: account.address,
                network: account.chain,
                public_key: account.publicKey,
                proof: { ...proof, state_init: account.walletStateInit }
            };
            const res = await fetch(`${API_HOST}/auth/connect`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json', Authorization: `initData ${tg.initData}` },
                body: JSON.stringify(body),
            });
            return res.json();
        }

        async function apiDisconnect() {
            const res = await fetch(`${API_HOST}/auth/disconnect`, {
                method: 'POST',
                headers: { Authorization: `initData ${tg.initData}` }
            });
            return res.json();
        }

        async function apiOneTimeLink(kind) {
            const res = await fetch(`${API_HOST}/links/request?chat=${kind}`, {
                headers: { Authorization: `initData ${tg.initData}` }
            });
            return res.json();
        }

        // ---------- UI state ----------
        const sectionAuth = $('#section-auth');
        const sectionLinks = $('#section-links');
        const btnConnect = $('#btn-connect');
        const btnDisconnect = $('#btn-disconnect');
        const btnDao = $('#btn-dao');
        const btnWhales = $('#btn-whales');
        const btnNotwise = $('#btn-notwise');
        const authHint = $('#auth-hint');

        const profile = $('#profile');
        const profileAvatar = $('#profile-avatar');
        const profileName = $('#profile-name');
        const profileUsername = $('#profile-username');

        const linkBox = $('#link-box');
        const linkOutput = $('#link-output');
        const btnCopy = $('#btn-copy');
        const btnClear = $('#btn-clear');
        const copyOk = $('#copy-ok');

        function formatTonAddress(addr, opts = {}) {
            const {
                bounceable = true,
                urlSafe = true,
                testOnly = false
            } = opts;

            try {
                if (typeof TonWeb === 'undefined' || !TonWeb?.utils?.Address) {
                    return addr ?? '';
                }
                const a = new TonWeb.utils.Address(String(addr));
                return a.toString(bounceable, urlSafe, testOnly);
            } catch {
                return addr ?? '';
            }
        }

        function shortAddr(addr, opts) {
            const fa = formatTonAddress(addr, opts);
            if (!fa) return '';
            return fa.length > 16 ? `${fa.slice(0, 8)}…${fa.slice(-6)}` : fa;
        }

        function renderProfile() {
            const u = tg?.initDataUnsafe?.user;
            if (!u) return;

            // аватар
            profileAvatar.innerHTML = '';
            if (u.photo_url) {
                const img = document.createElement('img');
                img.src = u.photo_url;
                img.alt = 'avatar';
                profileAvatar.appendChild(img);
            } else {
                const initials = ((u.first_name?.[0] ?? u.username?.[0] ?? 'U') + (u.last_name?.[0] ?? '')).toUpperCase();
                profileAvatar.textContent = initials;
            }

            const fullName = [u.first_name, u.last_name].filter(Boolean).join(' ');
            profileName.textContent = fullName || (u.username ? `@${u.username}` : `User #${u.id}`);
            profileUsername.textContent = u.username ? `@${u.username}` : `id: ${u.id}`;
            profile.style.display = 'flex';
        }

        function showAuth(wallet) {
            sectionAuth.style.display = 'grid';
            const connected = !!wallet;

            const pretty = connected ? formatTonAddress(wallet, {
                bounceable: true,
                urlSafe: true,
                testOnly: false
            }) : '';

            authHint.textContent = connected
                ? `Wallet linked: ${shortAddr(pretty)}`
                : 'No wallet linked';

            btnConnect.style.display = connected ? 'none' : 'inline-block';
            btnDisconnect.style.display = connected ? 'inline-block' : 'none';

            sectionLinks.style.display = connected ? 'grid' : 'none';
            [btnDao, btnWhales, btnNotwise].forEach(b => b.disabled = !connected);

            if (!connected) clearLink();
        }


        function setLink(url) {
            linkOutput.value = url || '';
            linkBox.style.display = url ? 'grid' : 'none';
            copyOk.style.display = 'none';
        }

        function clearLink() { setLink(''); }

        async function copyToClipboard(text) {
            try {
                if (navigator.clipboard?.writeText) {
                    await navigator.clipboard.writeText(text);
                } else {
                    // fallback
                    const ta = document.createElement('textarea');
                    ta.value = text; document.body.appendChild(ta);
                    ta.select(); document.execCommand('copy'); document.body.removeChild(ta);
                }
                copyOk.style.display = 'block';
                setTimeout(() => (copyOk.style.display = 'none'), 1500);
            } catch (e) {
                alert('Failed to copy');
            }
        }

        // ---------- TonConnect UI ----------
        const tonConnectUI = new TON_CONNECT_UI.TonConnectUI({
            manifestUrl: 'https://cdn.grouche.com/tonconnect-manifest.json'
        });
        tonConnectUI.uiOptions = { uiPreferences: { theme: 'DARK' } };

        // payload = id (как просили)
        async function setupProofPayload() {
            const payload = tg?.initDataUnsafe?.user?.id;
            if (!payload) {
                tonConnectUI.setConnectRequestParameters(null);
                return;
            }
            tonConnectUI.setConnectRequestParameters({
                state: 'ready',
                value: { tonProof: String(payload) },
            });
        }

        // init
        (async function bootstrap() {
            renderProfile();
            await setupProofPayload();

            try {
                const resp = await apiGetUser();

                showAuth(resp?.wallet ?? null);
            } catch {
                showAuth(null);
            }
        })();

        // Кнопки
        btnConnect.addEventListener('click', () => tonConnectUI.openModal());
        btnDisconnect.addEventListener('click', async () => {
            btnDisconnect.disabled = true;
            try {
                await tonConnectUI.disconnect();
                await apiDisconnect();
                showAuth(null);
            } finally {
                btnDisconnect.disabled = false;
            }
        });

        // одноразовые ссылки (теперь не открываем автоматически)
        async function requestLink(kind, btn) {
            btn.disabled = true;
            setLink(''); // очистим предыдущую
            try {
                const r = await apiOneTimeLink(kind);
                const url = r?.invite_link ?? '';
                if (url) setLink(url);
            } finally {
                btn.disabled = false;
            }
        }

        btnDao.addEventListener('click', () => requestLink('grouche_dao', btnDao));
        btnWhales.addEventListener('click', () => requestLink('grouche_whales', btnWhales));
        btnNotwise.addEventListener('click', () => requestLink('notwise_holders', btnNotwise));

        btnCopy.addEventListener('click', () => {
            if (linkOutput.value) copyToClipboard(linkOutput.value);
        });
        btnClear.addEventListener('click', clearLink);

        // TonConnect события
        tonConnectUI.onStatusChange(async (w) => {
            if (!w || w.account?.chain === TON_CONNECT_UI.CHAIN.TESTNET) {
                showAuth(null);
                return;
            }
            if (w.connectItems?.tonProof && 'proof' in w.connectItems.tonProof) {
                const resp = await apiConnect(w.connectItems.tonProof.proof, w.account);
                const wallet = resp?.data?.wallet ?? null;
                showAuth(wallet);
            }
        });
    </script>
</body>

</html>