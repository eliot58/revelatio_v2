<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Revelatio</title>
    <style>
        html,
        body {
            height: 100%;
        }

        * {
            box-sizing: border-box;
        }

        body {
            margin: 0;
            min-height: 100vh;
            background: #000;
            color: #fff;
            display: flex;
            align-items: center;
            justify-content: center;
            font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, "Apple Color Emoji", "Segoe UI Emoji";
        }

        .wrap {
            display: grid;
            gap: 16px;
            justify-items: center;
        }

        #connect {
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .actions {
            display: grid;
            gap: 12px;
            grid-auto-rows: min-content;
            width: min(92vw, 520px);
        }

        button {
            padding: 10px 16px;
            border: none;
            border-radius: 12px;
            background: #1a1a1a;
            color: #fff;
            cursor: pointer;
            font-weight: 600;
        }

        button:disabled {
            opacity: .5;
            cursor: not-allowed;
        }

        .hint {
            opacity: .7;
            font-size: 14px;
            text-align: center;
        }
    </style>
</head>

<body>
    <div class="wrap">
        <div id="connect"></div>

        <div class="actions" id="actions" style="display:none">
            <div class="hint">You are authorized. Choose a chat:</div>
            <button id="btn-dao" disabled>Grouche DAO</button>
            <button id="btn-whales" disabled>Grouche Whales</button>
            <button id="btn-notwise" disabled>NotWise holders</button>
        </div>
    </div>

    <script src="https://unpkg.com/@tonconnect/ui@latest/dist/tonconnect-ui.min.js"></script>
    <script src="https://telegram.org/js/telegram-web-app.js"></script>
    <script>
        let tg = window.Telegram.WebApp;

        const $ = (s) => document.querySelector(s);

        class TonProofDemoApiService {
            localStorageKey = 'access-token';
            host = 'https://revapi.masonsplay.dev';
            accessToken = null;
            refreshIntervalMs = 9 * 60 * 1000;

            constructor() {
                this.accessToken = localStorage.getItem(this.localStorageKey);
                if (!this.accessToken) this.generatePayload();
            }
            async generatePayload() {
                try {
                    const res = await fetch(`${this.host}/auth/generate_payload`, { method: 'POST' });
                    if (!res.ok) throw new Error(`HTTP ${res.status}`);
                    const data = await res.json();
                    return { tonProof: data.payload };
                } catch { return null; }
            }
            async checkProof(proof, account) {
                try {
                    const reqBody = { address: account.address, network: account.chain, proof: { ...proof, state_init: account.walletStateInit } };
                    const res = await fetch(`${this.host}/auth/check_proof`,
                        {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                Authorization: `initData ${tg.initData}`
                            },
                            body: JSON.stringify(reqBody),
                        }
                    );
                    const data = await res.json();
                    if (data?.token) {
                        localStorage.setItem(this.localStorageKey, data.token);
                        this.accessToken = data.token;
                    }
                } catch (e) { console.log('checkProof error:', e); }
            }
            reset() { this.accessToken = null; localStorage.removeItem(this.localStorageKey); this.generatePayload(); }
        }
        const TonProofDemoApi = new TonProofDemoApiService();

        const actionsEl = $('#actions');
        const btnDao = $('#btn-dao');
        const btnWhales = $('#btn-whales');
        const btnNotwise = $('#btn-notwise');

        const tonConnectUI = new TON_CONNECT_UI.TonConnectUI({
            manifestUrl: 'https://raw.githubusercontent.com/eliot58/grouche_api/refs/heads/main/tonconnect-manifest.json',
            buttonRootId: 'connect'
        });
        tonConnectUI.uiOptions = { uiPreferences: { theme: 'DARK' } };

        let firstProofLoading = true;
        const recreateProofPayload = async () => {
            if (firstProofLoading) {
                tonConnectUI.setConnectRequestParameters({ state: 'loading' });
                firstProofLoading = false;
            }
            const payload = await TonProofDemoApi.generatePayload();
            tonConnectUI.setConnectRequestParameters(payload ? { state: 'ready', value: payload } : null);
        };
        recreateProofPayload();
        setInterval(recreateProofPayload, TonProofDemoApi.refreshIntervalMs);

        let authorized = false;

        tonConnectUI.onStatusChange(async (w) => {
            if (!w || w.account?.chain === TON_CONNECT_UI.CHAIN.TESTNET) {
                TonProofDemoApi.reset();
                authorized = false;
                setButtonsEnabled(false);
                actionsEl.style.display = 'none';
                return;
            }

            if (w.connectItems?.tonProof && 'proof' in w.connectItems.tonProof) {
                await TonProofDemoApi.checkProof(w.connectItems.tonProof.proof, w.account);
            }

            if (!TonProofDemoApi.accessToken) {
                tonConnectUI.disconnect();
                authorized = false;
                setButtonsEnabled(false);
                actionsEl.style.display = 'none';
                return;
            }

            authorized = true;
            actionsEl.style.display = 'grid';
            setButtonsEnabled(true);
        });

        function setButtonsEnabled(en) {
            btnDao.disabled = !en;
            btnWhales.disabled = !en;
            btnNotwise.disabled = !en;
        }

        const CHATS = {
            dao: 'https://t.me/+3Xt4mf5MSY1hYWZi',
            whales: 'https://t.me/+HWeSSe6NA1xjOWMy',
            notwise: 'https://t.me/+tpwewNFYvx1hMzUy',
        };

        const openLink = (url) => window.open(url, '_blank', 'noopener,noreferrer');

        btnDao.addEventListener('click', () => authorized && openLink(CHATS.dao));
        btnWhales.addEventListener('click', () => authorized && openLink(CHATS.whales));
        btnNotwise.addEventListener('click', () => authorized && openLink(CHATS.notwise));
    </script>
</body>

</html>